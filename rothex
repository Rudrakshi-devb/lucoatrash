#include <GL/glut.h>
#include <math.h>

GLfloat hexagonSize = 0.5; // Initial size of the hexagon
GLfloat hexagonAngle = 0.0; // Initial rotation angle of the hexagon
GLfloat hexagonPositionX = 0.0; // Initial X position of the hexagon
GLfloat hexagonPositionY = 0.0; // Initial Y position of the hexagon

bool rotateHexagon = false;

void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Save the current matrix
    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();

    // Translate the hexagon to its position
    glTranslatef(hexagonPositionX, hexagonPositionY, 0.0);

    // Rotate the hexagon if rotateHexagon is true
    if (rotateHexagon)
        glRotatef(hexagonAngle, 0.0, 0.0, 1.0);

    // Draw the hexagon
    glBegin(GL_POLYGON);
    glColor3f(1.0, 1.0, 1.0); // White
    for (int i = 0; i < 6; ++i) {
        float angle = 2.0 * 3.14159265358979323846 * i / 6;
        float x = hexagonSize * cos(angle);
        float y = hexagonSize * sin(angle);
        glVertex2f(x, y);
    }
    glEnd();

    // Restore the saved matrix
    glPopMatrix();

    glFlush();
}

void reshape(int width, int height) {
    glViewport(0, 0, width, height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    if (width <= height) {
        gluOrtho2D(-1.0, 1.0, -1.0 * (GLfloat)height / (GLfloat)width,
            1.0 * (GLfloat)height / (GLfloat)width);
    }
    else {
        gluOrtho2D(-1.0 * (GLfloat)width / (GLfloat)height,
            1.0 * (GLfloat)width / (GLfloat)height, -1.0, 1.0);
    }
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void moveHexagon(int key, int x, int y) {
    switch (key) {
    case GLUT_KEY_LEFT:
        hexagonPositionX -= 0.01; // Move left
        break;
    case GLUT_KEY_RIGHT:
        hexagonPositionX += 0.01; // Move right
        break;
    case GLUT_KEY_UP:
        hexagonPositionY += 0.01; // Move up
        break;
    case GLUT_KEY_DOWN:
        hexagonPositionY -= 0.01; // Move down
        break;
    }
    glutPostRedisplay();
}

void update(int value) {
    if (rotateHexagon) {
        hexagonAngle += 2.0; // Increment rotation angle
        if (hexagonAngle > 360.0)
            hexagonAngle -= 360.0;
        glutPostRedisplay();
    }
    glutTimerFunc(25, update, 0);
}

void keyboard(unsigned char key, int x, int y) {
    switch (key) {
    case 's': // Rotate the hexagon
        hexagonSize -= 0.1;
        break;
    case 'S': // Resize the hexagon
        hexagonSize += 0.1;
        break;
    case 'r': // Stop rotation
        rotateHexagon = false;
        break;
    case 'R': // Start rotation
        rotateHexagon = true;
        break;
    }
    glutPostRedisplay();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Gyrometric Operations on 2D Objects");

    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);
    glutSpecialFunc(moveHexagon); // Register special key function for movement

    update(0); // Start the rotation update timer

    glutMainLoop();
    return 0;
}

