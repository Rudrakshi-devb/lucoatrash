4.
#include <GL/glut.h>

// Cube parameters
GLfloat cubeSize = 1.0f;
GLfloat cubeAngleX = 0.0f;
GLfloat cubeAngleY = 0.0f;
GLfloat cubePositionX = 0.0f;
GLfloat cubePositionY = 0.0f;
GLfloat cubePositionZ = -5.0f;

// Display function to render the cube
void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();
    glTranslatef(cubePositionX, cubePositionY, cubePositionZ);
    glRotatef(cubeAngleX, 1.0f, 0.0f, 0.0f);
    glRotatef(cubeAngleY, 0.0f, 1.0f, 0.0f);
    glScalef(cubeSize, cubeSize, cubeSize);

    glBegin(GL_QUADS);
    // Front face (z = 1.0f)
    glColor3f(1.0f, 0.0f, 0.0f); // Red
    glVertex3f(1.0f, 1.0f, 1.0f);
    glVertex3f(-1.0f, 1.0f, 1.0f);
    glVertex3f(-1.0f, -1.0f, 1.0f);
    glVertex3f(1.0f, -1.0f, 1.0f);

    // Back face (z = -1.0f)
    glColor3f(0.0f, 1.0f, 0.0f); // Green
    glVertex3f(1.0f, -1.0f, -1.0f);
    glVertex3f(-1.0f, -1.0f, -1.0f);
    glVertex3f(-1.0f, 1.0f, -1.0f);
    glVertex3f(1.0f, 1.0f, -1.0f);

    // Top face (y = 1.0f)
    glColor3f(0.0f, 0.0f, 1.0f); // Blue
    glVertex3f(1.0f, 1.0f, -1.0f);
    glVertex3f(-1.0f, 1.0f, -1.0f);
    glVertex3f(-1.0f, 1.0f, 1.0f);
    glVertex3f(1.0f, 1.0f, 1.0f);

    // Bottom face (y = -1.0f)
    glColor3f(1.0f, 1.0f, 0.0f); // Yellow
    glVertex3f(1.0f, -1.0f, 1.0f);
    glVertex3f(-1.0f, -1.0f, 1.0f);
    glVertex3f(-1.0f, -1.0f, -1.0f);
    glVertex3f(1.0f, -1.0f, -1.0f);

    // Right face (x = 1.0f)
    glColor3f(1.0f, 0.0f, 1.0f); // Magenta
    glVertex3f(1.0f, 1.0f, -1.0f);
    glVertex3f(1.0f, 1.0f, 1.0f);
    glVertex3f(1.0f, -1.0f, 1.0f);
    glVertex3f(1.0f, -1.0f, -1.0f);

    // Left face (x = -1.0f)
    glColor3f(0.0f, 1.0f, 1.0f); // Cyan
    glVertex3f(-1.0f, 1.0f, 1.0f);
    glVertex3f(-1.0f, 1.0f, -1.0f);
    glVertex3f(-1.0f, -1.0f, -1.0f);
    glVertex3f(-1.0f, -1.0f, 1.0f);
    glEnd();

    glutSwapBuffers();
}

// Reshape function to maintain aspect ratio
void reshape(int width, int height) {
    if (height == 0) height = 1;
    GLfloat aspect = (GLfloat)width / (GLfloat)height;

    glViewport(0, 0, width, height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0f, aspect, 0.1f, 100.0f);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

// Special key input function for rotation and movement
void specialKeys(int key, int x, int y) {
    switch (key) {
    case GLUT_KEY_UP:
        cubeAngleX -= 5.0f;
        break;
    case GLUT_KEY_DOWN:
        cubeAngleX += 5.0f;
        break;
    case GLUT_KEY_LEFT:
        cubeAngleY -= 5.0f;
        break;
    case GLUT_KEY_RIGHT:
        cubeAngleY += 5.0f;
        break;
    }
    glutPostRedisplay();
}

// Regular key input function for resizing and movement
void keyboard(unsigned char key, int x, int y) {
    switch (key) {
    case '+':
        cubeSize += 0.1f;
        break;
    case '-':
        cubeSize -= 0.1f;
        if (cubeSize < 0.1f) cubeSize = 0.1f;
        break;
    case 'w':
        cubePositionY += 0.1f;
        break;
    case 's':
        cubePositionY -= 0.1f;
        break;
    case 'a':
        cubePositionX -= 0.1f;
        break;
    case 'd':
        cubePositionX += 0.1f;
        break;
    }
    glutPostRedisplay();
}

// Initialization function
void init() {
    glEnable(GL_DEPTH_TEST);
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(800, 600);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Gyrometric Operations on 3D Cube");
    init();
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutSpecialFunc(specialKeys);
    glutKeyboardFunc(keyboard);
    glutMainLoop();
    return 0;
}

