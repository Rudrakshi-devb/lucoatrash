#include <GL/glut.h>

void init() {
    glClearColor(0.0, 0.0, 0.0, 1.0); // Set background color to black and opaque
    glColor3f(1.0, 1.0, 1.0); // Set the drawing color to white
    glMatrixMode(GL_PROJECTION); // To operate on the Projection matrix
    glLoadIdentity(); // Reset the projection matrix
    gluOrtho2D(0.0, 500.0, 0.0, 500.0); // Set the orthographic view
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT); // Clear the color buffer

    // Draw a triangle
    glBegin(GL_TRIANGLES);
    glVertex2f(100.0, 400.0);
    glVertex2f(50.0, 300.0);
    glVertex2f(150.0, 300.0);
    glEnd();

    // Draw a rectangle
    glBegin(GL_QUADS);
    glVertex2f(200.0, 400.0);
    glVertex2f(300.0, 400.0);
    glVertex2f(300.0, 300.0);
    glVertex2f(200.0, 300.0);
    glEnd();

    // Draw an unfilled polygon (line loop)
    glBegin(GL_LINE_LOOP);
    glVertex2f(350.0, 400.0);
    glVertex2f(450.0, 400.0);
    glVertex2f(450.0, 300.0);
    glVertex2f(400.0, 250.0);
    glVertex2f(350.0, 300.0);
    glEnd();

    glFlush(); // Render now
}

int main(int argc, char** argv) {
    glutInit(&argc, argv); // Initialize GLUT
    glutCreateWindow("OpenGL Setup Test"); // Create a window with the given title
    glutInitWindowSize(500, 500); // Set the window's initial width & height
    glutInitWindowPosition(50, 50); // Position the window's initial top-left corner
    glutDisplayFunc(display); // Register display callback handler for window re-paint
    init(); // Our own OpenGL initialization
    glutMainLoop(); // Enter the event-processing loop
    return 0;
}
